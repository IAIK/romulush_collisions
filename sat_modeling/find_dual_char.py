#!/usr/bin/env python3
"""
This script reads a bytewise dual characteristic .sol file generated by Gurobi
and tries to find a bitwise dual characteristic by using z3. The result is saved
as in numpy format as an .npz file.
"""
from __future__ import annotations

from z3 import *
from typing import *
from util import *
from read_sol import *
from cnf_util import *
from find_dual_solution import CollisionSolver
from estimate_probability import get_total_log_prob

from time import process_time
from functools import reduce
from itertools import product
from collections import Counter
from math import log2

from IPython import embed
from os import path

from itertools import count, takewhile

import numpy as np
from tqdm import tqdm

import inspect
import sys
import zipfile

from dataclasses import dataclass

# we approximate the S-box log probs using a fraction of the form
# x/WEIGHT_DENOM if --exact is given
WEIGHT_DENOM = 100


@dataclass(eq=False, frozen=True)
class DualChar:
    sbox_in: np.ndarray
    sbox_out: np.ndarray
    tbox_in: np.ndarray
    tbox_out: np.ndarray
    unknown: np.ndarray
    forget: np.ndarray

    def __eq__(self, other: DualChar):
        if not isinstance(other, DualChar):
            return False

        return (np.all(self.sbox_in == other.sbox_in)
                and np.all(self.sbox_out == other.sbox_out)
                and np.all(self.tbox_in == other.tbox_in)
                and np.all(self.tbox_out == other.tbox_out)
                and np.all(self.unknown == other.unknown)
                and np.all(self.forget == other.forget))

    def __hash__(self):
        return 0
        l = (
            hash(self.sbox_in.data.tobytes()),
            hash(self.sbox_out.data.tobytes()),
            hash(self.tbox_in.data.tobytes()),
            hash(self.tbox_out.data.tobytes()),
            hash(self.unknown.data.tobytes()),
            hash(self.forget.data.tobytes()),
        )
        return hash(l)


# disable assert and track
def _a_and_t(self, a, b):
    self.add(a)


Solver.assert_and_track = _a_and_t


class SkinnySolver:
    def __init__(self, s: Solver, milp_char, is_tbox_solver: bool, prefix: str = ''):
        self._s = s
        self._prefix = prefix
        self._char = milp_char
        self._is_tbox_solver = is_tbox_solver

        self.numrounds = len(transform_vars(milp_char['sbox'])) - 1

        self._tweakey = transform_vars(milp_char['tkey'])
        self._unknown = transform_vars(milp_char['unkn'])
        self._forget = transform_vars(milp_char['forg'])
        self._boxname = 'tbox' if self._is_tbox_solver else 'sbox'
        self._box = transform_vars(milp_char[self._boxname])

        # workaround for some unnecessary variables in the milp model
        if len(self._tweakey) == self.numrounds + 1:
            assert np.all(self._tweakey[-1]) == 0
            self._tweakey = self._tweakey[:-1]

        if is_tbox_solver:  # tweakey difference is zero for the tbox solver
            self._tweakey.fill(0)
        else:
            # the sbox solver cannot "forget" the difference
            self._unknown.fill(0)
            self._forget.fill(0)

        aligned_tweakey = self._tweakey.copy().reshape(self.numrounds, 16)
        for i in range(1, self.numrounds):
            aligned_tweakey[i:] = aligned_tweakey[i:, inv_tweakey_perm]
        aligned_tweakey = aligned_tweakey.reshape(self.numrounds, 4, 4)
        self._tweakey_activity = np.sum(aligned_tweakey, axis=0)

        # if not np.all(np.any([self._tweakey_activity == self.numrounds - 1, self._tweakey_activity == 0], axis=0)):
        #     raise NotImplementedError('expected one cancellation for each active tweakey')

        self._tk_cancellation_round = np.full((4, 4), None)

        nz_rnd, nz_row, nz_col = np.where((aligned_tweakey == 0) & (self._tweakey_activity != 0))
        self._tk_cancellation_round[nz_row, nz_col] = nz_rnd

        self._create_vars()
        # self._model_sboxes()
        self._model_linear_layer()

        for lfsr in self.lfsrs.flatten():
            if lfsr is not None:
                assert not self._is_tbox_solver
                for i, constraint in enumerate(lfsr.get_constraints()):
                    s.assert_and_track(constraint, f'{lfsr.name}_{i}')
        for lfsr in self.lfsrs_extra.flatten():
            if lfsr is not None:
                assert not self._is_tbox_solver
                for i, constraint in enumerate(lfsr.get_constraints()):
                    s.assert_and_track(constraint, f'{lfsr.name}_{i}')

    def _create_vars(self):
        rnds = self.numrounds
        self.sbox_input_var = [
            SkinnyState(f'{self._prefix}{self._boxname}_in_{rnd}', mask=self._box[rnd] != 0) for rnd in range(rnds)
        ]
        self.sbox_output_var = [
            SkinnyState(f'{self._prefix}{self._boxname}_out_{rnd}', mask=self._box[rnd] != 0) for rnd in range(rnds)
        ]

        self.pt = self.sbox_input_var[0]

        # we can use one LFSR for both TK2 and TK3, as we know there is a
        # cancellation at which both LFSRs are equal
        self.lfsrs = np.full((4, 4), None)
        self.lfsrs_extra = np.full((4, 4), None) # for lanes w/o cancellation

        for row, col in zip(*np.where(self._tweakey_activity != 0)):
            assert not self._is_tbox_solver
            self.lfsrs[row, col] = LfsrState(f'{self._prefix}tk_{row*4+col}', connection_poly)
        for row, col in zip(*np.where(self._tweakey_activity == self.numrounds)):
            # here there was no cancellation, so we need an extra lfsr
            assert not self._is_tbox_solver
            self.lfsrs_extra[row, col] = LfsrState(f'{self._prefix}tk_extra_{row*4+col}', connection_poly)

        self.round_tweakeys = []
        self.xored_rtks = []  # will be filled later
        for rnd in range(rnds):
            key, tk2, tk3 = np.full((3, 4, 4), None)

            for row, col in zip(*np.where(self._tweakey_activity != 0)):
                cancellation_round = self._tk_cancellation_round[row, col]
                if cancellation_round is None:
                    offset = (rnd + (row in [2, 3])) // 2
                    tk2[row, col] = self.lfsrs[row, col].get_bit_range(offset)
                    tk3[row, col] = self.lfsrs_extra[row, col].get_bit_range(-offset)
                    continue
                cancellation_start = (cancellation_round + 1) // 2

                # rows 2, 3 of the base tweakey are updated one round earlier
                offset = (rnd + (row in [2, 3])) // 2 - cancellation_start
                tk2[row, col] = self.lfsrs[row, col].get_bit_range(cancellation_start + offset)
                tk3[row, col] = self.lfsrs[row, col].get_bit_range(cancellation_start - offset)

            for i in range(rnd):
                key, tk2, tk3 = np.array([key, tk2, tk3]).reshape(3, 16)[:, tweakey_perm].reshape(3, 4, 4)

            self.round_tweakeys.append((key, tk2, tk3))

            xored_rtk = np.full((4, 4), None)
            for row, col in product(range(2), range(4)):
                tk_cells = [key[row, col], tk2[row, col], tk3[row, col]]
                tk_cells = [Concat(*tk) for tk in tk_cells if tk is not None]
                xored_rtk[row, col] = reduce(lambda a, b: a ^ b if a is not None else b, tk_cells, None)
                xored_rtk[row, col] = simplify(xored_rtk[row, col]) if xored_rtk[row, col] is not None else None
            self.xored_rtks.append(xored_rtk)

        self.m1 = self.round_tweakeys[0][1]
        self.m2 = self.round_tweakeys[0][2]

    def _model_linear_layer(self):
        for rnd in range(self.numrounds - 1):
            if np.all(self._unknown[rnd]):
                return  # if everything is unknown there is no need to model any additional linear layer

            tweakeys = self.xored_rtks[rnd]

            mc_input = self.sbox_output_var[rnd].as_array()
            mc_input[self._box[rnd] == 0] = 0  # we know these variables are zero anyway

            for row, col in product(range(2), range(4)):
                if tweakeys[row, col] is not None:
                    if mc_input[row, col] == 0:
                        mc_input[row, col] = tweakeys[row, col]
                    else:
                        mc_input[row, col] ^= tweakeys[row, col]

            mc_input = do_shift_rows(mc_input)

            # we only need to model variable with known difference
            for row, col in zip(*np.where((self._unknown[rnd + 1] == 0))):
                out_var = self.sbox_input_var[rnd + 1][row, col]
                in_vars = mc_input[mixing_mat[row] != 0, col]

                def xor(a, b):
                    if a == 0:
                        return b
                    if b == 0:
                        return a
                    return a ^ b
                cond = out_var == reduce(xor, in_vars)
                if cond is not True:
                    self._s.assert_and_track(cond, f'lin_{self._boxname}_{rnd}_{row}_{col}')


class DualCharSolver:
    def __init__(self, s: Solver, milp_char, enable_weight: bool = False):
        self.sbox_solver = SkinnySolver(s, milp_char, is_tbox_solver=False)
        # difference after final round must be zero
        for row, col in product(range(4), range(4)):
            tk = self.sbox_solver.xored_rtks[-1][row, col]
            if tk is None:
                tk = 0

            cond = self.sbox_solver.sbox_output_var[-1][row, col] == tk
            if cond is not True:
                s.assert_and_track(cond, f'final_delta_{row}_{col}')

        self.tbox_solver = SkinnySolver(s, milp_char, is_tbox_solver=True)
        self.numrounds = self.sbox_solver.numrounds

        self.sbox = transform_vars(milp_char['sbox'])
        self.tbox = transform_vars(milp_char['tbox'])
        self.forget = transform_vars(milp_char['forg'])
        self.unknown = transform_vars(milp_char['unkn'])
        self.s = s

        self.sbox_in_var = self.sbox_solver.sbox_input_var
        self.sbox_out_var = self.sbox_solver.sbox_output_var
        self.tbox_in_var = self.tbox_solver.sbox_input_var
        self.tbox_out_var = self.tbox_solver.sbox_output_var

        self._weight_vars: List[Tuple[BoolRef, int]] = []

        self.ddt4 = DDT4(sbox, 'sbox.npz')
        self.ddt = np.copy(ddt)
        self._cut_ddt4()

        self._model_sboxes(enable_weight)
        # self.s.add(PbLe(self._weight_vars, weight_limit))

    def constrain_partial(self, part_chars: PartialCharacteristics, idx: int):
        tweakey = part_chars.tweakeys[idx]
        if tweakey.shape != (2, 4, 4) or tweakey.dtype != np.uint8:
            raise ValueError()

        tweakey_sched = np.zeros((self.numrounds, 3, 4, 4), np.uint8)
        tweakey_sched[0, 1:3] = tweakey

        for i in range(1, self.numrounds):
            tweakey_sched[i] = update_tweakey(tweakey_sched[i - 1])

        for row, col in itershape((4, 4)):
            cancellation_round = self.sbox_solver._tk_cancellation_round[row, col]
            if cancellation_round is None:
                continue
            cancellation_round = 0

            _, tk2, tk3 = [x[row, col] for x in self.sbox_solver.round_tweakeys[cancellation_round]]
            tk2_val = tweakey_sched[cancellation_round, 1, row, col]
            tk3_val = tweakey_sched[cancellation_round, 2, row, col]

            for i, e in enumerate(reversed(tk2)):
                self.s.add(e == (int(tk2_val) >> i) & 1)
            for i, e in enumerate(reversed(tk3)):
                self.s.add(e == (int(tk3_val) >> i) & 1)
            # self.s.add(simplify(Concat(list(reversed(tk2)))) == BitVecVal(tweakey_sched[1, cancellation_round, row ,col], 8))
            # self.s.add(simplify(Concat(list(reversed(tk3)))) == BitVecVal(tweakey_sched[2, cancellation_round, row ,col], 8))

        in_deltas = part_chars.sbox_inputs[idx]
        out_deltas = part_chars.sbox_outputs[idx]
        assert np.all(ddt[in_deltas, out_deltas] > 0)

        for (rnd, row, col), delta_in, delta_out in zip(part_chars.relevant_sboxes, in_deltas, out_deltas):
            in_var = self.sbox_solver.sbox_input_var[rnd][row, col]
            out_var = self.sbox_solver.sbox_output_var[rnd][row, col]

            self.s.add(in_var == BitVecVal(int(delta_in), 8))
            self.s.add(out_var == BitVecVal(int(delta_out), 8))

    @staticmethod
    def _get_cnf(table_name: str, cutoff: int) -> CNF:
        if table_name.lower() not in ['ddt3', 'ddt4']:
            raise ValueError('unknown table: f{table_name!r}')
        table_name = table_name.lower()

        name_prefix = f'{table_name}_{cutoff}'
        resources_dir = path.join(path.dirname(__file__), 'resources')

        shortest_len = None
        shortest_file = None
        for f in os.listdir(resources_dir):
            if not f.startswith(name_prefix):
                continue
            if not f.endswith('.espresso') and not f.endswith('.dimacs'):
                continue

            fname = path.join(resources_dir, f)
            size = os.stat(fname).st_size
            if shortest_file is None or (size > 0 and size < shortest_len):
                shortest_len = size
                shortest_file = fname

        if shortest_file is not None:
            print(f'reading {table_name.upper()} CNF from {shortest_file}')
            with open(shortest_file, 'r') as f:
                if shortest_file.endswith('.espresso'):
                    return CNF.from_espresso(f.read())
                elif shortest_file.endswith('.dimacs'):
                    return CNF.from_dimacs(f.read())

        if table_name == 'ddt3':
            return DNF.from_lut(ddt4.ddt3.reshape(-1) >= cutoff).to_minimal_cnf(['-Decho'])
        if table_name == 'ddt4':
            raveled_indices = np.ravel_multi_index(ddt4.nz_indices, ddt4.ddt4.shape)
            dnf = DNF.from_indices(32, raveled_indices[ddt4.nz_entries >= ddt4_cutoff])
            return dnf.to_minimal_cnf(['-Decho'])

        assert 0, 'unreachable'

    def _cut_ddt4(self):
        ddt4 = self.ddt4
        small_entries = ddt4.nz_entries < ddt4_cutoff
        large_entries = ddt4.nz_entries >= ddt4_cutoff

        small_indices = tuple((x[small_entries] for x in ddt4.nz_indices))
        large_indices = tuple((x[large_entries] for x in ddt4.nz_indices))
        ddt4[small_indices] = 0
        ddt4.nz_indices = large_indices
        ddt4.nz_entries = ddt4[large_indices]

        self.ddt4_transitions = np.array(large_indices).transpose()
        self.nz_ddt4_transitions = self.ddt4_transitions[np.all(self.ddt4_transitions[:, [0, 1]] != 0, axis=1)]

        self.ddt[self.ddt < ddt_cutoff] = 0
        self.ddt_transitions = np.array(np.where(self.ddt != 0)).transpose()
        self.ddt_cnf = DNF.from_lut((self.ddt >= ddt_cutoff).flatten()).to_minimal_cnf(['-efast'])

        # raveled_indices = np.ravel_multi_index(ddt4.nz_indices, ddt4.ddt4.shape)
        # self.ddt4_dnf = DNF.from_indices(32, raveled_indices[ddt4.nz_entries >= ddt4_cutoff])
        self.ddt4_cnf = self._get_cnf('ddt4', ddt4_cutoff)
        self.ddt3_cnf = self._get_cnf('ddt3', ddt3_cutoff)

        print(f'allowing {len(self.ddt_transitions)} DDT transitions ({ddt_cutoff=}, len(constraints)={len(self.ddt_cnf)})')
        print(f'allowing {np.sum(ddt4.ddt3 >= ddt3_cutoff)} DDT3 transitions (cutoff: {ddt3_cutoff}, len(constraints)={len(self.ddt3_cnf)})')
        print(f'allowing {len(self.nz_ddt4_transitions)} DDT4 transitions (cutoff: {ddt4_cutoff}, len(constraints)={len(self.ddt4_cnf)})')

    def _model_single_sbox(self, in_var: BitVecRef, out_var: BitVecRef, in_deltas: List[int], weight_factor: Optional[int]):
        if in_deltas == [0]:
            cond_in = in_var == 0
            cond_out = out_var == 0
            if cond_in is not True:
                self.s.assert_and_track(cond_in, f'{in_var}_inactive')
            if cond_out is not True:
                self.s.assert_and_track(cond_out, f'{out_var}_inactive')
            return

        ddt = np.zeros_like(self.ddt)
        ddt[in_deltas] = self.ddt[in_deltas]
        variables = [out_var[i] for i in range(8)] + [in_var[i] for i in range(8)]

        if weight_factor is None:
            nz_indices, = np.where(ddt.reshape(-1) != 0)
            dnf = DNF.from_indices(16, nz_indices)
            cnf = dnf.to_minimal_cnf()

            model_cnf(self.s, variables, cnf)
            return

        weight_vars = []
        if args.exact:
            for numsols in Counter(np.sort(ddt[ddt != 0].flatten())[::-1]).keys():
                weight = -log2(numsols / 256)
                nz_indices, = np.where(ddt.reshape(-1) == numsols)
                if len(nz_indices) == 0:
                    continue

                dnf = DNF.from_indices(16, nz_indices)
                cnf = dnf.to_minimal_cnf()

                weight_var = Bool(str(in_var).replace('in_', '') + f'__w{weight:.2f}')
                self._weight_vars.append((weight_var, int(weight_factor * WEIGHT_DENOM * weight)))
                weight_vars.append(weight_var)

                model_cnf(self.s, variables + [weight_var], cnf, extra_var=[Not(weight_var)])
        else:
            for weight in range(8):
                # for weight w we also include all transitions with non-power of
                # two weights with slightly less probability

                low, high = 2**(8 - weight - 1), 2**(8 - weight)
                nz_indices, = np.where((ddt.reshape(-1) > low) & (ddt.reshape(-1) <= high))
                if len(nz_indices) == 0:
                    continue

                dnf = DNF.from_indices(16, nz_indices)
                cnf = dnf.to_minimal_cnf()

                weight_var = Bool(str(in_var).replace('in_', '') + f'__w{weight}')
                self._weight_vars.append((weight_var, weight_factor * weight))
                weight_vars.append(weight_var)

                model_cnf(self.s, variables + [weight_var], cnf, extra_var=[Not(weight_var)])

        # at least one transition must happen
        self.s.add(Or(weight_vars))

    def _model_sboxes(self, enable_weight: bool):
        idx_mask = (self.sbox != 0) | (((self.unknown == 0) | (self.forget != 0)) & (self.tbox != 0))
        for rnd, row, col in tqdm(list(zip(*np.where(idx_mask))), "modeling s-boxes"):
            sbox_in, sbox_out = self.sbox_in_var[rnd][row, col], self.sbox_out_var[rnd][row, col]
            tbox_in, tbox_out = self.tbox_in_var[rnd][row, col], self.tbox_out_var[rnd][row, col]

            sbox = self.sbox[rnd, row, col]
            tbox = self.tbox[rnd, row, col]
            unknown = self.unknown[rnd, row, col]
            forget = self.forget[rnd, row, col]

            if sbox and (tbox and forget):
                if enable_weight:
                    raise ValueError("weight limit is not supported with DDT3")

                # model ddt3
                # print('ddt3')
                assert not (rnd == row == col == 0), "add model for initial tbox difference"
                variables = reversed([sbox_in, tbox_in, sbox_out])
                variables = sum(([x[i] for i in range(8)] for x in variables), start=[])
                model_cnf(self.s, variables, self.ddt3_cnf)
                continue

            if sbox and (tbox and not unknown):
                if enable_weight:
                    raise ValueError("weight limit is not supported with DDT4")

                # model ddt4
                assert not (rnd == row == col == 0), "add model for initial tbox difference"
                # transitions = self.nz_ddt4_transitions
                # model_dnf(self.s, [sbox_in, tbox_in, sbox_out, tbox_out], transitions, f"ddt4_{rnd}_{row}_{col}")

                variables = reversed([sbox_in, tbox_in, sbox_out, tbox_out])
                variables = sum(([x[i] for i in range(8)] for x in variables), start=[])
                model_cnf(self.s, variables, self.ddt4_cnf)

                continue

            if not unknown:
                in_deltas = range(1, 256) if tbox else [0]
                if rnd == row == col == 0:  # special case for initial tbox difference
                    in_deltas = [1]
                self._model_single_sbox(tbox_in, tbox_out, in_deltas, 1 if enable_weight else None)

            in_deltas = range(1, 256) if sbox else [0]
            self._model_single_sbox(sbox_in, sbox_out, in_deltas, 1 + unknown if enable_weight else None)


def main(byte_char_file, out_file):
    global solve_time
    solve_time = []
    milp_char = read_milp_sol(byte_char_file)

    if milp_char['unkn'][0, 0, 0] and not milp_char['forg'][0, 0, 0]:
        print("[WARN] fixed input difference is set to unknown --> correcting it")
        milp_char['forg'][0, 0, 0] = 1

    if args.loop:
        os.mkdir(out_file)

    if args.lin_condition:
        from lin_tweakey_cond import TruncatedCharacteristic, LinearConditions
        char = TruncatedCharacteristic(byte_char_file)
        lin_cond = LinearConditions(char)
        partial_chars = lin_cond.iterate_tweakeys()

    s = Solver()
    s.set('seed', int.from_bytes(os.urandom(4), 'little'))
    skinny = DualCharSolver(s, milp_char, enable_weight=args.weight_limit is not None)
    numrounds = skinny.numrounds

    unique_results = set()
    duplicate_results_in_a_row = 0

    for index in takewhile(lambda index: index == 0 or args.loop, count(0)):
        if args.lin_condition:
            s.push()
            index = 473
            skinny.constrain_partial(partial_chars, index)
            s_solve = Solver()
            s_solve.assert_exprs(s.assertions())
            s.pop()
        else:
            s_solve = s

        if args.weight_limit is not None:
            if args.exact:
                s_solve.add(PbLe(skinny._weight_vars, WEIGHT_DENOM * args.weight_limit))
            else:
                s_solve.add(PbLe(skinny._weight_vars, args.weight_limit))

        print(f'[{index:03d}] solving...', end="")
        sys.stdout.flush()
        start = process_time()
        res = s_solve.check()
        end = process_time()
        solve_time.append(end - start)
        print(res, end='')
        print(f'  [{precisedelta(end-start)}]')

        if res != sat:
            if args.lin_condition:
                continue
            if res == unsat:
                # embed()
                pass
            return
        m = s_solve.model()

        sbox_in = np.array([v.get_value(m) for v in skinny.sbox_in_var])
        sbox_out = np.array([v.get_value(m) for v in skinny.sbox_out_var])
        tbox_in = np.array([v.get_value(m, default_value=np.int64(-1)) for v in skinny.tbox_in_var])
        tbox_out = np.array([v.get_value(m, default_value=np.int64(-1)) for v in skinny.tbox_out_var])
        unknown = skinny.unknown
        forget = skinny.forget

        unknown = unknown[:len(sbox_in)]
        forget = forget[:len(sbox_in)]

        result = DualChar(sbox_in, sbox_out, tbox_in, tbox_out, unknown, forget)

        if result in unique_results:
            duplicate_results_in_a_row += 1
            print(f'duplicate (streak of {duplicate_results_in_a_row}, unique: {len(unique_results)} / {index + 1})')
            if args.stop_after_streak is not None and duplicate_results_in_a_row >= args.stop_after_streak:
                break
            continue
        duplicate_results_in_a_row = 0
        unique_results.add(result)

        total_log_prob = get_total_log_prob(sbox_in, sbox_out, tbox_in, tbox_out, unknown, forget)

        print(f'total probabilty: 2^{total_log_prob:.1f}')

        tweakey_vars = np.array(skinny.sbox_solver.round_tweakeys)
        tweakeys = np.zeros_like(tweakey_vars, dtype=np.uint8).flatten()

        for i, e, in enumerate(tweakey_vars.flatten()):
            if e is None:
                continue
            tweakeys[i] = m.eval(Concat(e)).as_long()
        tweakeys = tweakeys.reshape(tweakey_vars.shape)
        # reduced_tweakeys = np.bitwise_xor.reduce(tweakeys, axis=1)

        if args.check:
            print('constructing collision solver')
            coll_solver = CollisionSolver(Solver(), sbox_in, sbox_out, tbox_in, tbox_out, tweakeys, unknown, forget)
            print('solving for collision...', end='')
            sys.stdout.flush()
            coll_exists = coll_solver.s.check()
            print(f' {coll_exists}')
            if coll_exists == unsat:
                continue
            if coll_exists == unknown:
                return

        for i in range(len(tweakeys) - 1):
            assert np.all(tweakeys[i + 1] == update_tweakey(tweakeys[i]))

        fname = path.join(out_file, f'skinny_r{numrounds}_{index:03d}_{abs(total_log_prob):.1f}') if args.loop else out_file
        fname = fname + '.npz' if not fname.endswith('.npz') else fname

        np.savez(fname, args=vars(args), solving_time=end - start, sbox_in=sbox_in,
                 sbox_out=sbox_out, tbox_in=tbox_in, tbox_out=tbox_out, tweakeys=tweakeys,
                 unknown=skinny.unknown, forget=skinny.forget)
        with zipfile.ZipFile(fname, mode='a') as zf:
            zf.writestr(path.basename(__file__), inspect.getsource(sys.modules[__name__]))
    embed()


if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('--ddt-cutoff', type=int, default=16, help='cutoff for the entries of the DDT')
    parser.add_argument('--ddt3-cutoff', type=int, default=16, help='cutoff for the entries of the 3-dimensional DDT')
    parser.add_argument('--ddt4-cutoff', type=int, default=16, help='cutoff for the entries of the 4-dimensional DDT')
    parser.add_argument('--loop', action='store_true', help='loop solver.check() to find multiple models')
    parser.add_argument('--check', action='store_true', help='immediately search for collision based on characteristic')
    parser.add_argument('--lin-condition', action='store_true', help='use linear chonditions imposed by truncated char')
    parser.add_argument('--stop-after-streak', type=int, default=None, help='stop after this many solutions where duplicate in a row')
    parser.add_argument('-w', '--weight-limit', type=int, default=None, help='limit log2(probability) <= weight_limit (note that 170/11469 DDT transitions are ignored in this mode)')
    parser.add_argument('--exact', action='store_true', help='use exact weight limit (up to 2^0.005 error per S-box)')
    parser.add_argument('byte_char_file', type=str, help='byte-level differential characteristic found by MILP')
    parser.add_argument('out_file', type=str, help='output file for bit level characteristic in .npz format. If --loop is specified a directory will be created instead.')

    args = parser.parse_args()
    if args.exact and not args.weight_limit:
        raise RuntimeError("cannot use --exact without -w")

    ddt_cutoff = args.ddt_cutoff
    ddt3_cutoff = args.ddt3_cutoff
    ddt4_cutoff = args.ddt4_cutoff

    if args.weight_limit:
        ddt_cutoff = 2

    print(args)

    try:
        main(args.byte_char_file, args.out_file)
    except KeyboardInterrupt:
        print('interrupted')
        pass
